import { loadFile, loadString, registerModule } from 'nbb'
import * as path from 'path'
registerModule(path, 'path')
import * as child_process from 'child_process'
registerModule(child_process, 'child_process')
import 'nbb/lib/./nbb_tools_cli.js'
await loadString("#!/usr/bin/env nbb\n\n(ns shrinkwrap\n  (:require\n    [clojure.tools.cli :as cli]\n    [\"child_process\" :as cp]\n    [\"path\" :as path]\n    [nbb.core :refer [*file* invoked-file]]))\n\n(defn run-command [cmd]\n  (println (str \"Running: \" cmd))\n  (let [result (cp/spawnSync \"sh\" #js[\"-c\" cmd] #js{:stdio \"inherit\"})]\n    (when (not= (.-status result) 0)\n      (println (str \"Command failed: \" cmd))\n      (js/process.exit 1))))\n\n(defn build-binary [input-file output-file]\n  (let [mjs-file (str (aget (path/parse input-file) \"name\") \".mjs\")\n        dist-file \"dist/index.mjs\"]\n    \n    (println (str \"Building binary from \" input-file \" to \" output-file))\n    \n    ;; Step 1: Compile ClojureScript to JavaScript\n    (run-command (str \"nbb bundle \" input-file \" -o \" mjs-file))\n    \n    ;; Step 2: Bundle with ncc\n    (run-command (str \"npx ncc build \" mjs-file \" -m\"))\n    \n    ;; Step 3: Create executable binary\n    (run-command (str \"echo '#!/usr/bin/env -S node --experimental-default-type=module' > \" output-file))\n    (run-command (str \"cat \" dist-file \" >> \" output-file))\n    (run-command (str \"chmod 755 \" output-file))\n    \n    (println (str \"âœ… Binary created: \" output-file))))\n\n(def cli-options\n  [[\"-i\" \"--input FILE\" \"Input ClojureScript file\"]\n   [\"-o\" \"--output FILE\" \"Output binary name\"]\n   [\"-h\" \"--help\"]])\n\n(defn print-usage [summary]\n  (println \"nbb ClojureScript Binary Builder\")\n  (println \"Usage: ./build.cljs [options]\")\n  (println)\n  (println \"Options:\")\n  (println summary))\n\n(defn -main [& args]\n  (let [{:keys [options errors summary]} (cli/parse-opts args cli-options)]\n    (cond\n      errors\n      (doseq [e errors]\n        (println e))\n      \n      (:help options)\n      (print-usage summary)\n\n      (or (not (:input options)) (not (:output options)))\n      (do\n        (when (not (:input options))\n          (println \"Error: Missing required option --input\"))\n        (when (not (:output options))\n          (println \"Error: Missing required option --output\"))\n        (println)\n        (print-usage summary)\n        (js/process.exit 1))\n      \n      :else\n      (build-binary (:input options) (:output options)))))\n\n(when (= *file* (invoked-file))\n  (apply -main (js->clj (.slice js/process.argv 2))))\n", {disableConfig: true})